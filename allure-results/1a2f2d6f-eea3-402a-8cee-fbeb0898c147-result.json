{"name": "test_login[Chrome]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <test_login.Test_login object at 0x107362310>\n\n    def test_login(self):\n        self.browser = Login(self.browser)\n        try:\n            self.browser.do_login(Testdata.USERNAME, Testdata.PASSWORD)\n>           title_after_login = self.browser.get_title_after_login(Testdata.AFTER_LOGIN_PAGE_TITLE)\n\nTests/Functional/test_login.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <login.Login object at 0x107434400>, title = 'Az oldal nem tal치lhat칩 - Training360'\n\n    def get_title_after_login(self, title):\n>       return self.get_title(title)\n\nPages/Navbar/login.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <login.Login object at 0x107434400>, title = 'Az oldal nem tal치lhat칩 - Training360'\n\n    def get_title(self, title):\n>       wait(self.browser, 10).until(EC.title_is(title))\n\nConfigs/basemethods.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"495d16543d0456ba6fe7db4fe27fadbb\")>\nmethod = <function title_is.<locals>._predicate at 0x10740ef70>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:89: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_login.Test_login object at 0x107362310>\n\n    def test_login(self):\n        self.browser = Login(self.browser)\n        try:\n            self.browser.do_login(Testdata.USERNAME, Testdata.PASSWORD)\n            title_after_login = self.browser.get_title_after_login(Testdata.AFTER_LOGIN_PAGE_TITLE)\n            assert title_after_login == Testdata.AFTER_LOGIN_PAGE_TITLE\n    \n    \n        except:\n            screen_shot = 'test_login.png'\n            self.browser.save_screenshot(screen_shot)\n            with open (screen_shot, mode= 'rb') as file:\n                f = file.read()\n            allure.attach(f, 'screenshot', allure.attachment_type.PNG )\n>           assert False\nE           assert False\n\nTests/Functional/test_login.py:62: AssertionError"}, "attachments": [{"name": "screenshot", "source": "e87f1292-443f-4264-95c5-86358f8f0487-attachment.png", "type": "image/png"}], "parameters": [{"name": "init_driver", "value": "'Chrome'"}], "start": 1644974834393, "stop": 1644974847127, "uuid": "4c2b4e4f-57f9-41e2-ac20-7bb33a2e9092", "historyId": "09060bcdfd21d54a2142c39b24c7ca31", "testCaseId": "4251f7c876dc81d193b9583d70c83c90", "fullName": "Tests.Functional.test_login.Test_login#test_login", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "parentSuite", "value": "Tests.Functional"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "Test_login"}, {"name": "host", "value": "Opens-MacBook-Air.local"}, {"name": "thread", "value": "20424-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.Functional.test_login"}]}