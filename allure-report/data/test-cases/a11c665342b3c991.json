{"uid":"a11c665342b3c991","name":"test_fill_dataform[Chrome]","fullName":"Tests.Functional.test_msg_to_comp.Test_msg_to_comp#test_fill_dataform","historyId":"27ace56ef669e2f8faa1eeabc1bef7d4","time":{"start":1669006629920,"stop":1669006640028,"duration":10108},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_msg_to_comp.Test_msg_to_comp object at 0x1075d4550>\n\n    def test_fill_dataform(self): # This would be send message in real life and would be clicked send and checked in database and in receivers email\n        self.browser = Contact_Popupobj(self.browser)\n>       self.browser.fill_data_form(Testdata.NAME, Testdata.EMAIL, Testdata.MESSAGE)\n\nTests/Functional/test_msg_to_comp.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../MyStuff/Web/Training360/AutomatedTests/Pages/contact_popupobj.py:15: in fill_data_form\n    self.do_send_keys(Locators.name_input, name)\n../../../MyStuff/Web/Training360/AutomatedTests/Configs/basemethods.py:31: in do_send_keys\n    wait(self.browser, 10).until(EC.element_to_be_clickable(by_locator)).send_keys(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a1942581f6feae2eb749ac17a618aaf6\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x10774ca60>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../MyStuff/Web/Training360/AutomatedTests/env/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init_driver","time":{"start":1669006625198,"stop":1669006626739,"duration":1541},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"init_driver::0","time":{"start":1669006640044,"stop":1669006640117,"duration":73},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('init_driver')"},{"name":"parentSuite","value":"Tests.Functional"},{"name":"suite","value":"test_msg_to_comp"},{"name":"subSuite","value":"Test_msg_to_comp"},{"name":"host","value":"Opens-Air.home"},{"name":"thread","value":"2682-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.Functional.test_msg_to_comp"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"init_driver","value":"'Chrome'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('init_driver')"]},"source":"a11c665342b3c991.json","parameterValues":["'Chrome'"]}